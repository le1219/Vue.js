VUE屬性
el
data
methods
computed
watch

v-html="XXX"
data{
    XXX:,
},
}


v-bind:
v-bind:checked === :checked

把資料綁定到屬性

v-on:click 
v-on:mouseover
v-on:load

v-on === @click
監聽DOM改變資料

<p>{{count*4}}</p>
{{ }} 和 v-bink都可以 用作表達 
<input type="checkbox" v-bind:checked="count%2===0">

v-model雙向綁定
 <input type="text" v-model="both">
        {{both}}
         data: {
                text: 'YO',
                both: 'HAPPY'
            },

instance實例
class類別
Example instance實例
const vm = new Vue({

})
Template 可直接無視html內屬性
 const vm = new Vue({
            el: '#app',
            template: '<div><h2> {{msg}} {{msg}}</h2></div>',
            // el: document.getElementById('app'),
            data: {
                msg: 'HELLO111'
            }
        })

computed
get 一定要return
set


--------------
watch
監聽 data and computed 每個變動
v-model="value"
data:{
    value
}
watch:{
    value(val,oldVal)
}
value名字要一樣
也可宣告成物件
watch：{
    value:{
        handler(val,oldVal){
             console.log(`${oldVal} -> ${val}`)
        }
        deep:true,
        //deep偵查整列有沒有改變
    }
}

------------------------
生命週期 lifecycle
4step
before create -> created
before mounte -> mounted
before update -> updated
before destory -> destoryed
new Vue -> 初始化 -> before create -> created ->
    if      看看有沒有el -> 也沒有 mounte //不執行
    else    看看有沒有templatel
->before mount 掛載後就跑到 mounted
-> before update ->updated
->before destory -> destoryed
跑完以後就摧毀它
---------------------------------------
陣列轉元素 v-for 
 <option v-for="(month,idx) in months" :value="idx">{{month}}</option>
 data:{
     months: [
                    'jan', 'feb', 'mar', 'apr', 'may'
                ]
 }
 ---------------------------------------
 物件轉元素
 v-for順序可能不一樣 example 用number作key 數字大於英文
 還是整列不會影響順序
 pp: [
                    { prop: 'name', value: 'CHARLEY' },
                    { prop: 'age', value: '12' },
                    { prop: 'add', value: 'pp 中心' },
                ]
 ---------------------------------------
this.nums.push(this.nums.length + 1);
 this.nums.pop();
this.nums.shift();
this.nums.unshift(0);
//(位置index,length) 
this.nums.splice(1, 2);
//(位置index,length,+,+,+) 
 this.nums.splice(1, 2, 9, 8, 7);
 this.nums.sort();
 this.nums.reverse();
 this.nums = this.nums.filter(elm => (elm % 2 === 0));
  ---------------------------------------
  不吃
  this.nums[2]=10 喝 this.nums.length = 3
  這樣可以
  this.nums.splice(4, 1, 10);          
    this.nums.splice(3)

filrer() 過濾
sort會修改原有的整列 ->所以改成 .slice().sort
  ---------------------------------------
  JSON
  Example
     const data = {
         name : 'ELLLLL',
         x :20,
         y : 1, 
     };
     //物件轉字串
     const dataJSON = JSON.stringify(data);
     //字串轉資料 or 物件
     const data2 = JSON.patse(dataJSON); 